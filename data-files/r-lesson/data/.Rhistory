e = dist(as.matrix(t(dat)))
hc = hclust(e)
plot(hc)
head(dat)
head(t(dat))
e = t(dat)
View(e)
row.names(e)
row.names(e) = e[1,]
e[1,]
row.names(e) = e[1,]
row.names(e)
col.names(e) = e[1,]
colnames(e) = e[1,]
View(e)
e = e[-1,]
d = dist(as.matrix(e))
e = t(dat)
colnames(e) = e[1,]
e = e[-1,]
d = dist(as.matrix(e))
hc = hclust(e)
plot(hc)
d = dist(as.matrix(e))
View(e)
d = dist(as.matrix(e))
hc = hclust(e)
head(d)
d
hc = hclust(e)
hc = hclust(d)
plot(hc)
dat = read.csv('~/Dropbox/EEMB222/2016/ncTrans3_genecol.csv')
dim(dat)
dat.pca = prcomp(dat[,2:ncol(dat)], center = TRUE, scale = TRUE)
print(dat.pca)
plot(dat.pca, type = 'l')
summary(dat.pca)
a = (dat.pca$rotation)
plot(dat.pca$rotation[,1], dat.pca$rotation[,2])
d <- dist(as.matrix(a))
hc <- hclust(d)
plot(hc)
dat = read.csv('~/Dropbox/EEMB222/2016/ncTrans3_genecol.csv')
dat.pca = prcomp(dat[,2:ncol(dat)], center = TRUE, scale = TRUE)
print(dat.pca)
plot(dat.pca, type = 'l')
summary(dat.pca)
a = (dat.pca$rotation)
plot(dat.pca$rotation[,1], dat.pca$rotation[,2])
plot(a[,1], a[,2])
d <- dist(as.matrix(a))
hc <- hclust(d)
plot(hc)
d <- dist(as.matrix(a))
hc <- hclust(d)
plot(hc)
e = t(dat)
colnames(e) = e[1,]
e = e[-1,]
d = dist(as.matrix(e))
hc = hclust(d)
plot(hc)
d <- dist(as.matrix(a))
View(a)
plot(a[,1], a[,2])
d <- dist(as.matrix(a))
hc <- hclust(d)
plot(hc)
View(a)
d <- dist(as.matrix(a[,1:5]))
hc <- hclust(d)
plot(hc)
plot(dat.pca.pc[,1], dat.pca.pc[,2])
dat.pca = prcomp(dat[,2:ncol(dat)], center = TRUE, scale = TRUE)
print(dat.pca)
plot(dat.pca, type = 'l')
summary(dat.pca)
dat.pca.pc = (dat.pca$rotation)
plot(dat.pca.pc[,1], dat.pca.pc[,2])
pca.dist <- dist(as.matrix(dat.pca.pc[,1:5]))
hc.pca <- hclust(pca.dist)
plot(hc.pca)
e = t(dat)
colnames(e) = e[1,]
e = e[-1,]
dat.t = t(dat)
colnames(dat.t) = dat.t[1,]
dat.t = dat.t[-1,]
dat.dist = dist(as.matrix(dat.t))
hc.dat = hclust(dat.dist)
plot(hc.dat)
?hclust
plot(hc.dat)
View(dat)
View(dat)
hist(dat[,2])
dat.log = dat
View(dat)
dat.log[,2:ncol(dat.log)] = log(dat.log[,2:ncol(dat.log)]+1)
summary(dat.pca)
dat.pca.pc = (dat.pca$rotation)
hist(dat.log[,2])
View(dat.log)
dat.log.t = t(dat.log)
colnames(dat.t.log) = dat.t.log[1,]
dat.log.t = dat.log.t[-1,]
dat.log.dist = ddist(as.matrix(dat.t.log))
dat.log.dist = dist(as.matrix(dat.t.log))
dat.log.dist = dist(as.matrix(dat.log.t))
hc.dat.log = hclust(dat.log.dist)
plot(hc.dat.logt)
plot(hc.dat.log)
dat.pca = prcomp(dat[,2:ncol(dat)], center = TRUE, scale = TRUE)
print(dat.pca)
#plot variance of PC's
plot(dat.pca, type = 'l')
#shows cumulative percentage
summary(dat.pca)
View(dat.pca.pc)
dat.pca.pc = (dat.pca$rotation) #just extractin the eigenvectors
dat.pca = prcomp(dat[,2:ncol(dat)], center = TRUE, scale = TRUE)
print(dat.pca)
#plot variance of PC's
plot(dat.pca, type = 'l')
#shows cumulative percentage
summary(dat.pca)
dat.pca.pc = (dat.pca$rotation) #just extractin the eigenvectors
dat.t = t(dat)
colnames(dat.t) = dat.t[1,]
dat.t = dat.t[-1,]
dat.dist = dist(as.matrix(dat.t))
hc.dat = hclust(dat.dist)
plot(hc.dat)
dat.pca = prcomp(dat[,2:ncol(dat)], center = TRUE, scale = TRUE)
print(dat.pca)
plot(dat.pca, type = 'l')
#shows cumulative percentage
summary(dat.pca)
dat.pca.pc = (dat.pca$rotation) #just extractin the eigenvectors
#hierarchical cluster analysis on the PCA, standard, and log-transformed.
plot(dat.pca.pc[,1], dat.pca.pc[,2])
dat.pca = prcomp(dat[,2:ncol(dat.log)], center = TRUE, scale = TRUE)
print(dat.pca)
#plot variance of PC's
plot(dat.pca, type = 'l')
#shows cumulative percentage
summary(dat.pca)
dat.pca.pc = (dat.pca$rotation) #just extractin the eigenvectors
#PCA of log-transormed data
dat.pca = prcomp(dat[,2:ncol(dat)], center = TRUE, scale = TRUE)
dat.pca = prcomp(dat[,2:ncol(dat.log)], center = TRUE, scale = TRUE)
print(dat.pca)
#plot variance of PC's
plot(dat.pca, type = 'l')
#shows cumulative percentage
summary(dat.pca)
dat.pca.pc = (dat.pca$rotation)
dat.t = t(dat)
dat.log.t = t(dat.log)
colnames(dat.log.t) = dat.log.t[1,]
dat.log.t = dat.log.t[-1,]
dat.log.dist = dist(as.matrix(dat.log.t))
hc.dat.log = hclust(dat.log.dist)
plot(hc.dat.log)
View(dat)
summary(dat.pca)
plot(dat.pca, type = 'l')
plot(dat.pca.pc[,1], dat.pca.pc[,2])
pca.dist <- dist(as.matrix(dat.pca.pc[,1:5]))
hc.pca <- hclust(pca.dist)
plot(hc.pca)
?hclust
read.csv('~/Dropbox/EEMB222/2016/Week3_cort/')
read.csv('~/Dropbox/EEMB222/2016/Week3_cort/mod.cort.eemb222.csv')
dat = read.csv('~/Dropbox/EEMB222/2016/Week3_cort/mod.cort.eemb222.csv')
head(dat)
library(plyr)
library(dplyr)
View(dat)
glimpse(dat)
dat = mutate(dat, timeSinceWake = sample.time - wake.time)
View(dat)
?lmlist
head(dat)
dat_day_time = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml~ timeSinceWake)
slope = model$coefficients[2]
se = summary(model)$coefficients[2,2]
p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
data.frame(slope, p, se, rsq)
})
head(dat)
model = lm(cort.pg.ml ~ timeSinceWake)
dat_day_time = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml ~ timeSinceWake)
slope = model$coefficients[2]
se = summary(model)$coefficients[2,2]
p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
data.frame(slope, p, se, rsq)
})
head(dat)
dat_day_time = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml~ timeSinceWake, data = x)
slope = model$coefficients[2]
se = summary(model)$coefficients[2,2]
p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
data.frame(slope, p, se, rsq)
})
detach(dat)
ls
model = lm(cort.pg.ml~ timeSinceWake, data = dat)
slope = model$coefficients[2]
se = summary(model)$coefficients[2,2]
p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
data.frame(slope, p, se, rsq)
dat_day_time = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml~ timeSinceWake, data = x)
slope = model$coefficients[2]
se = summary(model)$coefficients[2,2]
p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
data.frame(slope, p, se, rsq)
})
View(dat)
dat_day_time = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml~ timeSinceWake, data = x)
#slope = model$coefficients[2]
se = summary(model)$coefficients[2,2]
p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
data.frame( p, se, rsq)
#data.frame(slope, p, se, rsq)
})
dat_day_time = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml~ timeSinceWake, data = x)
slope = model$coefficients[2]
#se = summary(model)$coefficients[2,2]
p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
data.frame(slope, p, rsq)
#data.frame(slope, p, se, rsq)
})
dat_day_time = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml~ timeSinceWake, data = x)
slope = model$coefficients[2]
#se = summary(model)$coefficients[2,2]
#p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
data.frame(slope, p, rsq)
data.frame(slope, p, se, rsq)
})
View(dat_day_time)
model
summary(model)$coefficients
summary(model)$coefficients[2,2]
summary(model)$coefficients[2,4]
dat_day_time = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml~ timeSinceWake, data = x)
slope = model$coefficients[2]
se = summary(model)$coefficients[2,2]
p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
data.frame(slope, p, rsq)
})
dat_day_time = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml~ timeSinceWake, data = x)
slope = model$coefficients[2]
#se = summary(model)$coefficients[2,2]
#p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
data.frame(slope, p, rsq)
})
View(dat_day_time)
dat$cort.pg.ml.log = log(dat$cort.pg.ml)
dat_day_time = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml.log~ timeSinceWake, data = x)
slope = model$coefficients[2]
#se = summary(model)$coefficients[2,2]
#p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
data.frame(slope, p, rsq)
})
dat_dat_time %>%
summarize(dat_dat_time, )
glimpse(dat_day_time)
nrows(dat_dat_time)
nrow(dat_dat_time)
glimpse(dat)
dat_day_time = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml.log~ timeSinceWake, data = x)
slope = model$coefficients[2]
#se = summary(model)$coefficients[2,2]
#p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
days = max(day)
data.frame(slope, p, rsq, days)
})
head(dat)
dat_day_time = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml.log~ timeSinceWake, data = x)
slope = model$coefficients[2]
#se = summary(model)$coefficients[2,2]
#p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
days = max(x$day)
data.frame(slope, p, rsq, days)
})
View(dat)
glimpse(dat)
dat_day_time = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml.log~ timeSinceWake, data = x)
slope = model$coefficients[2]
#se = summary(model)$coefficients[2,2]
#p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
percBF = x$percBF
days = max(x$day)
data.frame(slope, p, rsq, days)
})
ggplot(dat = dat_day_time, aes(x = slope, y = percBF))+geom_line()
library(ggplot2)
dat_day_time = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml.log~ timeSinceWake, data = x)
slope = model$coefficients[2]
#se = summary(model)$coefficients[2,2]
#p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
percBF = x$percBF
days = max(x$day)
data.frame(slope, p, rsq, days)
})
ggplot(dat = dat_day_time, aes(x = slope, y = percBF))+geom_line()
dat_day_time = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml.log~ timeSinceWake, data = x)
slope = model$coefficients[2]
#se = summary(model)$coefficients[2,2]
#p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
percBF = x$percBF
days = max(x$day)
data.frame(slope, p, rsq, days, percBF)
})
ggplot(dat = dat_day_time, aes(x = slope, y = percBF))+geom_line()
dat_day_time = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml.log~ timeSinceWake, data = x)
slope = model$coefficients[2]
#se = summary(model)$coefficients[2,2]
#p = summary(model)$coefficients[2,4]
rsq = summary(model)$r.squared
percBF = mean(x$percBF)
days = max(x$day)
data.frame(slope, p, rsq, days, percBF)
})
ggplot(dat = dat_day_time, aes(x = slope, y = percBF))+geom_point()
ggplot(dat = dat_day_time, aes(x = slope, y = percBF))+geom_point()+abline()
ggplot(dat = dat_day_time, aes(x = slope, y = percBF))+geom_point()+geom_smooth
ggplot(dat = dat_day_time, aes(x = slope, y = percBF))+geom_point()+geom_smooth()
ggplot(dat = dat_day_time, aes(x = slope, y = percBF))+geom_point()+geom_smooth(fit = 'lm')
?geom_smooth()
ggplot(dat = dat_day_time, aes(x = slope, y = percBF))+geom_point()+geom_smooth(stat = 'lm')
ggplot(dat = dat_day_time, aes(x = slope, y = percBF))+geom_point()+geom_smooth(method = 'lm')
View(dat_day_time)
summary(model)
summary(model)$r.squared
a = summary(model)
a$coefficients
model$coefficients
dat_day_time_slope = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml.log~ timeSinceWake, data = x)
slope = model$coefficients[2]
rsq = summary(model)$r.squared
percBF = mean(x$percBF)
days = max(x$day)
data.frame(slope, p, rsq, days, percBF)
})
View(dat_day_time_slope)
install.packages(c("akima", "BH", "boot", "class", "cluster", "codetools", "curl", "deSolve", "devtools", "dplyr", "evaluate", "fields", "fmsb", "foreign", "formatR", "geosphere", "ggmap", "gridExtra", "highr", "Hmisc", "httr", "KernSmooth", "knitr", "lattice", "latticeExtra", "lme4", "manipulate", "mapproj", "maps", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "oce", "R6", "RcppEigen", "rpart", "rstudioapi", "seacarb", "signal", "sp", "spam", "spatial", "survival"))
dat$timeSinceWake = dat$sample.time - dat$wake.time
dat = read.csv('~/Dropbox/EEMB222/2016/Week3_cort/mod.cort.eemb222.csv')
library(plyr)
library(dplyr)
library(ggplot2)
#thought that using mutate might
dat$timeSinceWake = dat$sample.time - dat$wake.time
dat$cort.pg.ml.log = log(dat$cort.pg.ml)
## Get slope for each after log-transforming.
dat_day_time_slope = ddply(dat, c('PID', 'day'), function(x){
model = lm(cort.pg.ml.log~ timeSinceWake, data = x)
slope = model$coefficients[2]
rsq = summary(model)$r.squared
percBF = mean(x$percBF)
days = max(x$day)
data.frame(slope, p, rsq, days, percBF)
})
ggplot(dat = dat_day_time_slope, aes(x = slope, y = percBF))+geom_point()+geom_smooth(method = 'lm')
dat = read.csv('~/Box Sync/EEMB222/2016/week9_Elizabeth/Forbes_CO2acc_KLEE_4Mar16.csv')
head(dat)
colnames(dat)
ggplot(dat, aes(x = hrs..post.H2O, y = carbon.acc.))+geom_line()+
facet_grid(treatment~replicate)
library(ggplot2)
dat = read.csv('~/Box Sync/EEMB222/2016/week9_Elizabeth/Forbes_CO2acc_KLEE_4Mar16.csv')
head(dat)
ggplot(dat, aes(x = hrs..post.H2O, y = carbon.acc.))+geom_line()+
facet_grid(treatment~replicate)
View(dat)
ggplot(dat, aes(x = hrs..post.H2O, y = carbon.acc.))+geom_line(aes(group = replicate.., color = replicate..))+
facet_grid(soil.type~treatment)
ggplot(dat, aes(x = hrs..post.H20, y = carbon.acc.))+geom_line(aes(group = replicate.., color = replicate..))+
facet_grid(soil.type~treatment)
dat$replicate.. = as.factor(dat$replicate..)
ggplot(dat, aes(x = hrs..post.H20, y = carbon.acc.))+geom_line(aes(group = replicate.., color = replicate..))+
facet_grid(soil.type~treatment)
head(dat)
dat$location
head(dat)
dat$location = NULL # ONLY ONE LOCATION.
head(dat)
library(ggplot2)
dat = read.csv('~/Box Sync/EEMB222/2016/week9_Elizabeth/Forbes_CO2acc_KLEE_4Mar16.csv')
dat$location = NULL # ONLY ONE LOCATION.
colnames(dat)
colnames(dat) = c('ID', 'hrs', 'carbon.acc', 'treat', 'soil.type', 'rep')
dat$rep = as.factor(dat$rep)
ggplot(dat, aes(x = hrs, y = carbon.acc))+geom_line(aes(group = rep, color = rep))+
facet_grid(soil.type~treat)
source('~/.active-rstudio-document', echo=TRUE)
library(plyr)
library(dplyr)
dat.sum = dat %>%
group_by(treat, soil.type, rep)%>%
summarize(total.carbon = sum(carbon.acc))
dat.sum
ggplot(dat.sum, aes(x = soil.type, y = total.carbon))+geom.point()+
facet_wrap(~treat)
ggplot(dat.sum, aes(x = soil.type, y = total.carbon))+geom_point()+
facet_wrap(~treat)
ggplot(dat.sum, aes(x = treat, y = total.carbon))+geom_point()+
facet_wrap(~soil.type)
lm(total.carbon ~ treat+soil.type + treat*soil.type, dat=dat.sum )
lm.sum = lm(total.carbon ~ treat+soil.type + treat*soil.type, dat=dat.sum )
summary(lm.sum)
View(dat)
dat.sum
View(dat.sum)
dat.sum$mw = c(rep('0', 12), rep('mw', 12))
View(dat.sum)
?rep
dat.sum$c = c(rep(c('0','c'), each = 6, 2))
View(dat.sum)
lm.sum = lm(total.carbon~ mw + c + mw*c + soil.type)
lm.sum = lm(total.carbon~ mw + c + mw*c + soil.type, dat = dat.sum)
summary(lm.sum)
lm.sum = lm(total.carbon ~ treat+soil.type + treat*soil.type, dat=dat.sum )
ggplot(dat.sum, aes(x = treat, y = total.carbon))+geom_point()+
facet_wrap(~soil.type)
dat.sum$mw = c(rep('0', 12), rep('mw', 12))
dat.sum$c = c(rep(c('nc','c'), each = 6, 2))
lm.sum = lm(total.carbon~ mw + c + mw*c + soil.type, dat = dat.sum)
summary(lm.sum)
dat.sum$mw = c(rep('0', 12), rep('mw', 12))
dat.sum$c = c(rep(c('nc','c'), each = 6, 2))
lm.sum = lm(total.carbon~ mw + c + mw*c + soil.type, dat = dat.sum)
summary(lm.sum)
lm.sum = lm(total.carbon ~ treat+soil.type + treat*soil.type, dat=dat.sum )
summary(lm.sum)
lm.sum
summary(lm.sum)
anova(total.carbon~ mw + c + mw*c + soil.type, dat = dat.sum)
?anova
anova(lm.sum, dat = dat.sum)
lm.sum = lm(total.carbon ~ treat+soil.type, dat=dat.sum )
anova(lm.sum, dat = dat.sum)
glm(lm.sum, dat = dat.sum)
glm.diag.plots(glm(lm.sum, dat = dat.sum))
lm.sum = lm(total.carbon ~ treat+soil.type, dat=dat.sum )
summary(lm.sum)
anova(lm.sum)
lm.sum = lm(total.carbon ~ treat+soil.type + treat*soil.type, dat=dat.sum )
summary(lm.sum)
anova(lm.sum)
head(dat)
filter(dat, hrs !=0)
dat = filter(dat, hrs !=0)
head(dat)
ggplot(dat, aes(x = hrs, y = carbon.acc))+geom_line(aes(group = rep, color = rep))+
facet_grid(treat~soil.type)
View(dat)
setRepositories(graphics = getOption("menu.graphics"),
ind = NULL, addURLs = character())
1
chooseCRANmirror(graphics = getOption("menu.graphics"), ind = NULL,
useHTTPS = getOption("useHTTPS", TRUE),
local.only = FALSE)
install.packages(c("boot", "curl", "deSolve", "evaluate", "formatR", "ggplot2", "git2r", "gridExtra", "gtable", "Hmisc", "lme4", "manipulate", "maps", "Matrix", "mgcv", "munsell", "nlme", "nnet", "oce", "openssl", "RcppEigen", "scales", "sp"))
dat = read.csv('~/Box Sync/SilverpHOx/silverphox_presensdata.csv)
dat = read.csv('~/Box Sync/SilverpHOx/silverphox_presensdata.csv')
dat = read.csv('~/Box Sync/SilverpHOx/silverphox_presensdata.csv')
View(dat)
?is.na
dat = dat[!is.na(dat[,3]),]
View(dat)
getwd()
setwd()
class(2.2)
class(2)
setwd("~/Desktop/software-carpentry-2016/data-files/r-lesson/data")
